package com.epicest.snippetmanager.gui;

import com.epicest.snippetmanager.SnippetManager;
import com.epicest.snippetmanager.object.*;
import javax.swing.SwingUtilities;
import javax.swing.event.*;

/**
 * A JPanel object to be used as a tab representing a category
 *
 * @author Jayar
 */
public class SnippetTab extends javax.swing.JPanel {

 /**
  * The SnippetManager this tab is used in
  */
 SnippetManager snippetManager;
 /**
  * The index of the category this tab represents
  */
 int categoryIndex;

 /**
  * The listener used for updating the name of the category this tab represents
  */
 DocumentListener languageListener = new DocumentListener() {
  @Override
  public void insertUpdate(DocumentEvent de) {
   Runnable doHighlight = new Runnable() {
    @Override
    public void run() {
     categoryNameEdited();
    }
   };
   SwingUtilities.invokeLater(doHighlight);
  }

  @Override
  public void removeUpdate(DocumentEvent de) {
   Runnable doHighlight = new Runnable() {
    @Override
    public void run() {
     categoryNameEdited();
    }
   };
   SwingUtilities.invokeLater(doHighlight);
  }

  @Override
  public void changedUpdate(DocumentEvent de) {
   Runnable doHighlight = new Runnable() {
    @Override
    public void run() {
     categoryNameEdited();
    }
   };
   SwingUtilities.invokeLater(doHighlight);
  }
 };
 /**
  * The listener used for updating a name of a snippet in the category this tab
  * represents
  */
 DocumentListener snippetNameListener = new DocumentListener() {
  @Override
  public void insertUpdate(DocumentEvent de) {
   Runnable doHighlight = new Runnable() {
    @Override
    public void run() {
     snippetNameEdited();
    }
   };
   SwingUtilities.invokeLater(doHighlight);
  }

  @Override
  public void removeUpdate(DocumentEvent de) {
   Runnable doHighlight = new Runnable() {
    @Override
    public void run() {
     snippetNameEdited();
    }
   };
   SwingUtilities.invokeLater(doHighlight);
  }

  @Override
  public void changedUpdate(DocumentEvent de) {
   Runnable doHighlight = new Runnable() {
    @Override
    public void run() {
     snippetNameEdited();
    }
   };
   SwingUtilities.invokeLater(doHighlight);
  }
 };
 /**
  * The listener used for updating a text of a snippet in the category this tab
  * represents
  */
 DocumentListener snippetTextListener = new DocumentListener() {
  @Override
  public void insertUpdate(DocumentEvent de) {
   Runnable doHighlight = new Runnable() {
    @Override
    public void run() {
     snippetTextEdited();
    }
   };
   SwingUtilities.invokeLater(doHighlight);
  }

  @Override

  public void removeUpdate(DocumentEvent de) {
   Runnable doHighlight = new Runnable() {
    @Override
    public void run() {
     snippetTextEdited();
    }
   };
   SwingUtilities.invokeLater(doHighlight);
  }

  @Override
  public void changedUpdate(DocumentEvent de) {
   Runnable doHighlight = new Runnable() {
    @Override
    public void run() {
     snippetTextEdited();
    }
   };
   SwingUtilities.invokeLater(doHighlight);
  }
 };

 /**
  * Creates new form SnippetTab
  *
  * @param originalSnippetManager
  * @param originalCategoryIndex
  */
 public SnippetTab(SnippetManager originalSnippetManager, int originalCategoryIndex) {
  initComponents();
  categoryIndex = originalCategoryIndex;
  snippetManager = originalSnippetManager;
  refreshCategoryComponents();
 }

 /**
  * Refreshes components related to the values of the category this tab
  * represents
  */
 private void refreshCategoryComponents() {
  tabNameTextField.getDocument().removeDocumentListener(languageListener);
  tabNameTextField.setText(getCategory().getName());
  tabNameTextField.getDocument().addDocumentListener(languageListener);
  snippetList.setListData(getCategory().getSnippetsArray());
 }

 /**
  * @return the category this tab represents
  */
 public Category getCategory() {
  return snippetManager.categories.get(categoryIndex);
 }

 /**
  * This method is called from within the constructor to initialize the form.
  * WARNING: Do NOT modify this code. The content of this method is always
  * regenerated by the Form Editor.
  */
 @SuppressWarnings("unchecked")
 // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
 private void initComponents() {

  tabNameLabel = new javax.swing.JLabel();
  tabNameTextField = new javax.swing.JTextField();
  tabSeparator = new javax.swing.JSeparator();
  snippetsPanel = new javax.swing.JPanel();
  jScrollPane1 = new javax.swing.JScrollPane();
  snippetList = new javax.swing.JList<>();
  addItemButton = new javax.swing.JButton();
  removeItemButton = new javax.swing.JButton();
  snippetPanel = new javax.swing.JPanel();
  snippetLabel = new javax.swing.JLabel();
  snippetTextField = new javax.swing.JTextField();
  jScrollPane2 = new javax.swing.JScrollPane();
  snippetTextArea = new javax.swing.JTextArea();

  tabNameLabel.setText("Category Name: ");

  tabNameTextField.setText("New Category");

  snippetsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Snippets"));

  snippetList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
  snippetList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
   public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
    snippetListValueChanged(evt);
   }
  });
  jScrollPane1.setViewportView(snippetList);

  addItemButton.setText("+");
  addItemButton.addActionListener(new java.awt.event.ActionListener() {
   public void actionPerformed(java.awt.event.ActionEvent evt) {
    addItemButtonActionPerformed(evt);
   }
  });

  removeItemButton.setText("-");
  removeItemButton.addActionListener(new java.awt.event.ActionListener() {
   public void actionPerformed(java.awt.event.ActionEvent evt) {
    removeItemButtonActionPerformed(evt);
   }
  });

  javax.swing.GroupLayout snippetsPanelLayout = new javax.swing.GroupLayout(snippetsPanel);
  snippetsPanel.setLayout(snippetsPanelLayout);
  snippetsPanelLayout.setHorizontalGroup(
   snippetsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
   .addGroup(snippetsPanelLayout.createSequentialGroup()
    .addContainerGap()
    .addGroup(snippetsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
     .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
     .addGroup(snippetsPanelLayout.createSequentialGroup()
      .addComponent(addItemButton)
      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
      .addComponent(removeItemButton)))
    .addContainerGap())
  );
  snippetsPanelLayout.setVerticalGroup(
   snippetsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
   .addGroup(snippetsPanelLayout.createSequentialGroup()
    .addContainerGap()
    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addGroup(snippetsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
     .addComponent(addItemButton)
     .addComponent(removeItemButton))
    .addContainerGap())
  );

  snippetPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

  snippetLabel.setText("Snippet Name: ");

  snippetTextField.setText("Null Snippet");
  snippetTextField.setEnabled(false);

  snippetTextArea.setColumns(20);
  snippetTextArea.setRows(5);
  snippetTextArea.setText("Null Snippet");
  snippetTextArea.setWrapStyleWord(true);
  snippetTextArea.setEnabled(false);
  snippetTextArea.setWrapStyleWord(SnippetManager.wrapByWords);
  snippetTextArea.setLineWrap(SnippetManager.wrap);
  jScrollPane2.setViewportView(snippetTextArea);

  javax.swing.GroupLayout snippetPanelLayout = new javax.swing.GroupLayout(snippetPanel);
  snippetPanel.setLayout(snippetPanelLayout);
  snippetPanelLayout.setHorizontalGroup(
   snippetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
   .addGroup(snippetPanelLayout.createSequentialGroup()
    .addContainerGap()
    .addGroup(snippetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
     .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
     .addGroup(snippetPanelLayout.createSequentialGroup()
      .addComponent(snippetLabel)
      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
      .addComponent(snippetTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)))
    .addContainerGap())
  );
  snippetPanelLayout.setVerticalGroup(
   snippetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
   .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, snippetPanelLayout.createSequentialGroup()
    .addContainerGap()
    .addGroup(snippetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
     .addComponent(snippetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
     .addComponent(snippetLabel))
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
    .addContainerGap())
  );

  javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
  this.setLayout(layout);
  layout.setHorizontalGroup(
   layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
   .addGroup(layout.createSequentialGroup()
    .addContainerGap()
    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
     .addComponent(tabSeparator)
     .addGroup(layout.createSequentialGroup()
      .addComponent(tabNameLabel)
      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
      .addComponent(tabNameTextField))
     .addGroup(layout.createSequentialGroup()
      .addComponent(snippetsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
      .addComponent(snippetPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addGap(8, 8, 8)))
    .addContainerGap())
  );
  layout.setVerticalGroup(
   layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
   .addGroup(layout.createSequentialGroup()
    .addContainerGap()
    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
     .addComponent(tabNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
     .addComponent(tabNameLabel))
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(tabSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
     .addComponent(snippetsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
     .addComponent(snippetPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    .addContainerGap())
  );
 }// </editor-fold>//GEN-END:initComponents

 /**
  * Refreshes components related to a snippet in the category this tab
  * represents
  */
 private void snippetListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_snippetListValueChanged
  if (snippetList.getSelectedIndex() != -1) {
   snippetTextField.getDocument().removeDocumentListener(snippetNameListener);
   snippetTextField.setText(snippetList.getModel().getElementAt(snippetList.getSelectedIndex()).getName());
   snippetTextField.setEnabled(true);
   snippetTextField.getDocument().addDocumentListener(snippetNameListener);
   snippetTextArea.getDocument().removeDocumentListener(snippetTextListener);
   snippetTextArea.setText(snippetList.getModel().getElementAt(snippetList.getSelectedIndex()).getSnippet());
   snippetTextArea.setEnabled(true);
   snippetTextArea.getDocument().addDocumentListener(snippetTextListener);
  } else {
   snippetTextField.getDocument().removeDocumentListener(snippetNameListener);
   snippetTextField.setText("Null Snippet");
   snippetTextField.setEnabled(false);
   snippetTextField.getDocument().addDocumentListener(snippetNameListener);
   snippetTextArea.getDocument().removeDocumentListener(snippetTextListener);
   snippetTextArea.setText("Null Snippet");
   snippetTextArea.setEnabled(false);
   snippetTextArea.getDocument().addDocumentListener(snippetTextListener);
  }
 }//GEN-LAST:event_snippetListValueChanged

 /**
  * Adds a snippet to the category this tab represents
  */
 private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemButtonActionPerformed
  int selectedIndex = snippetList.getSelectedIndex();
  new Snippet().setParent(getCategory());
  refreshCategoryComponents();
  snippetList.setSelectedIndex(selectedIndex + 1);
 }//GEN-LAST:event_addItemButtonActionPerformed

 /**
  * Removes a snippet from the category this tab represents
  */
 private void removeItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemButtonActionPerformed
  int selectedIndex = snippetList.getSelectedIndex();
  getCategory().getSnippets().remove(selectedIndex);
  refreshCategoryComponents();
  snippetList.setSelectedIndex(selectedIndex - 1);
 }//GEN-LAST:event_removeItemButtonActionPerformed

 /**
  * Where the user is in the category name text field
  */
 public static int categoryNameCaretPosition = 0;

 /**
  * Refreshes the tabs to show the new name
  */
 private void categoryNameEdited() {
  categoryNameCaretPosition = tabNameTextField.getCaretPosition();
  getCategory().setName(tabNameTextField.getText());
  snippetManager.refreshTabs(SnippetManager.REFRESH_RENAME);
 }

 /**
  * Renames a snippet in the category this tab represents
  */
 private void snippetNameEdited() {
  int selectedIndex = snippetList.getSelectedIndex();
  int caretPosistion = snippetTextField.getCaretPosition();
  getCategory().getSnippets().get(selectedIndex).setName(snippetTextField.getText());
  refreshCategoryComponents();
  snippetList.setSelectedIndex(selectedIndex);
  snippetTextField.requestFocus();
  snippetTextField.setCaretPosition(caretPosistion);
 }

 /**
  * Edits the text in a snippet in the category this tab represents
  */
 private void snippetTextEdited() {
  int selectedIndex = snippetList.getSelectedIndex();
  getCategory().getSnippets().get(selectedIndex).setSnippet(snippetTextArea.getText());
 }

 // Variables declaration - do not modify//GEN-BEGIN:variables
 private javax.swing.JButton addItemButton;
 private javax.swing.JScrollPane jScrollPane1;
 private javax.swing.JScrollPane jScrollPane2;
 private javax.swing.JButton removeItemButton;
 private javax.swing.JLabel snippetLabel;
 private javax.swing.JList<Snippet> snippetList;
 private javax.swing.JPanel snippetPanel;
 private javax.swing.JTextArea snippetTextArea;
 private javax.swing.JTextField snippetTextField;
 private javax.swing.JPanel snippetsPanel;
 private javax.swing.JLabel tabNameLabel;
 public javax.swing.JTextField tabNameTextField;
 private javax.swing.JSeparator tabSeparator;
 // End of variables declaration//GEN-END:variables
}
